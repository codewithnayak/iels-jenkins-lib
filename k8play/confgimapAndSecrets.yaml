apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.name }}-configmap" #if using helm
data:
  appsettings.json: |
    {
      "Configuration" : "somevalue"
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
  namespace: default
type: Opaque
data:
  common.secret.json: | # One pipe indicates multiline values are followed .
    {
      "secretKey":"secretValue"
    }


#We can use Secrets even for non-sensitive binary data, but be aware that the maximum size of a Secret is limited to 1MB.
---
apiVersion: v1
kind: Pod
metadata:
  name: "MYAPP"
  namespace: default
  labels:
    app: "MYAPP"
spec:
  containers:
    - name: MYAPP
      image: "debian-slim:latest"
      resources:
        limits:
          cpu: 200m
          memory: 500Mi
        requests:
          cpu: 100m
          memory: 200Mi
      env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: MYAPP # configmap name
              key: DB_HOST
      ports:
        - containerPort: 80
          name: http
      volumeMounts:
        - name: appsettings.json
          mountPath: /app/bin
  volumes:
    - name: appsettings.json
      configMap: # Refer the entire configmap as volume
        name: SomeConfigMap
    - name: cert
      secret:
        secreName: mysecret # Declared above as kind secret , but better to create manually or use vault
  restartPolicy: Always
